TITLE: PyDAQviewer Tutorial
AUTHOR: Ahmed Ammar {copyright|CC BY} Email:ahmed.ammar@fst.utm.tn at University of Tunis El Manar, Faculty of Sciences of Tunis, LSAMA Laboratory & ISWI-Tunisia.
AUTHOR: Hassen Ghalila Email:hassen.ghalila@gmail.com at University of Tunis El Manar, Faculty of Sciences of Tunis, LSAMA Laboratory & ISWI-Tunisia.
DATE: today
__Summary.__
The VLF PyDAQviewer (Data Acquisition data viewer)is a Python program designed to make it easier to view and analyze data acquired with your AWESOME receiver. Tis Program is inspired from the matlab PyDAQviewer program developped by Benjamin Cotts at Stanford University and distribuded for the use of AWESOME-VLF community at the ISWI network.

TOC: on

!split
======= The VLF PyDAQviewer =======
The program is broken up into three main sections:

o Entering which data you wish to plot
o Find/plot data
o Viewing/interaction with data

!split
======= Which Data to Plot =======
Narrowband	data	are	the	amplitude and	phase	of	specific	transmitter	frequencies	received	at	a	given	location.	This	dataset	is modest,	on	the	order	of	100	MB	per	day	per	site,	and	can	be	fairly	easily	transmitted	from remote	field	sites	over	the	internet.	This	data	can	be	archived	continuously.

The	data	are	saved	in	a	Matlab	v4	format,	which	can	be	easily	read	in	Matlab.	The	format consists	of	a	header	with	basic	information,	followed	by	the	data	itself.	Matlab	v4	is	an	easy format.	The	specific	format	is	detailed	below,	so	that	it	is	machine-readable	in	any	digital application.

===== Narrowband	data	file	naming	convention =====
Narrowband filename convension is like discribed in the "International	Space	Weather	Initiative	(ISWI)	Data	Policy (version 1.3.1)": "http://newserver.stil.bas.bg/ISWI/PDFsJ/ISWI_DataPolicy_1.3.1_final.pdf" for AWESOME receiver.

XXYYMMDDHHMMSSZZZ_ACCT.mat

* XX  - Station	ID
* YY	- Year
* MM	- Month
* DD	- Day
* HH	- Hour
* MM	- Minute
* SS	- Second
* ZZZ	- Transmitter	Callsign
* A	- Not	relevant
* CC	- 00	for	N/S	channel,	01	for	E/W	channel
* T	- Type	of	data
  * A	is	low	resolution	(1	Hz	sampling	rate)	amplitude
  * B	is	low	resolution	(1	Hz	sampling	rate)	phase
  * C	is	high	resolution	(50	Hz	sampling	rate)	amplitude
  * D	is	high	resolution	(50	Hz	sampling	rate)	phase
  * F	is	high	resolution	(50	Hz	sampling	rate)	effective	group	delay
!split
===== Folder Path Convension: working directory =====
FAfter running the PyDAQviewer.py script, the working directory that is used to store your Narrowband data is set by default `'C:/NarrowbandData/'`. See the user interface in Figure ref{fig:GUI}.

FIGURE: [imgs/GUI_PyDAQviewer, width=500 frac=1.0] PyDAQviewer GUI when you run the PyDAQviewer.py script. label{fig:GUI}



FIGURE: [imgs/opendir, width=500 frac=1.0] Select NarrowbandData folder. label{fig:SelectFolder}

The path to your data will be something like: `'C:/NarrowbandData/SiteName/Year/MM/DD/'` (e.g. `'C:/NarrowbandData/Tunisia/2018/03/25/'`). Note that this can be on any drive root drive: C-Z including DVD drives etc, so if you burn data to a DVD burn it in the same folder and the PyDAQviewer will be able to find it.
!split
===== Select date from calander =====
After locating the working directory, the user can select AWESOME's data recording date by using a calendar widget as shown in Figure ref{fig:SelectDate}.

FIGURE: [imgs/SelectDate_PyDAQviewer, width=500 frac=1.0] Select date of the recorded data from the calendar. label{fig:SelectDate}

!split
===== Receiver-Transmitter Information =====
This file is simply a .py file (Python code below) in which you will enter two dictionaries. The first dictionary is Rx_ID indicating the AWESOME location and its ID. The second dictionary is Tx_ID indicating the VLF transmitter ID and the orientation of the antenna (eg NS or EW).

!bc python
# -*- coding: utf-8 -*-
#RxTxInfo.py
'''
Purpose: Save VLF Receivers (Rx) and Transmitters (Tx) Info   
'''
# Rx info
Rx_ID = {
            "Tunisia":"TN",
            "Algeria":"AL",
            "France":"FR",
            "Japan":"JP",
            "NewYork":"NY",
            "Boulder":"BO",
            "Cheyenne":"CH",
            "Walsenburg":"WS",
            "LasVegas":"LV",
            
            
            }

# Tx info
Tx_ID = {
            "NAA-NS":"NAA_000", 
            "NAA-EW":"NAA_001",
            "NRK-NS":"NRK_000",
            "NRK-EW":"NRK_001",
            "NLK-NS":"NLK_000",
            "NLK-EW":"NLK_001",
            "NAU-NS":"NAU_000",
            "NAU-EW":"NAU_001",
            "NPM-NS":"NPM_000",
            "NPM-EW":"NPM_001",
            "ICV-NS":"ICV_000",
            "ICV-EW":"ICV_001",
            "NSC-NS":"NSC_000",
            "NSC-EW":"NSC_001",
            "GQD-NS":"GQD_000",
            "GQD-EW":"GQD_001",
            "GBZ-NS":"GBZ_000",
            "GBZ-EW":"GBZ_001",
            "DHO-NS":"DHO_000",
            "DHO-EW":"DHO_001",
            "HWU-NS":"HWU_000",
            "HWU-EW":"HWU_001",
            "JXN-NS":"JXN_000",
            "JXN-EW":"JXN_001",
            "ISR-NS":"ISR_000",
            "ISR-EW":"ISR_001"
            }
!ec


FIGURE: [imgs/SelectRx, frac=1.0] Select AWESOME station. label{fig:SelectRx}


FIGURE: [imgs/SelectTx, frac=1.0] Select VLF transmitter. label{fig:SelectTx}


======= Reproducing the LEP Tutorial =======
Now that you have a basic understanding of how the DAQviewer works, it's time to put it to the test and try out all the features. To do this we'll be reproducing a few of the plots you made by hand in the LEP tutorial.

To start edit the `SiteInfo.py` file to include the sites: Cheyenne, Boulder, Walsenburg, and Las Vegas (note in the `SiteInfo.py` file Las Vegas should be all one word: LasVegas).

FIGURE: [imgs/LEPtuto, width=500 frac=1.0] Example working on data from LEP tutorial. label{fig:LEP_Tuto}

The output of this configuration is in below:

FIGURE: [imgs/LEPfigure1, width=500 frac=1.0] Generated figure. label{fig:LEP_figure1}


FIGURE: [imgs/LEPfigure2, width=500 frac=1.0] Zoomed figure. label{fig:LEP_figure2}

